Внесите 15 правок в свой код с учётом рекомендаций из данного занятия, и напишите по каждой, как и что конкретно вы улучшили. 

1. Было:
   validation_results = {}
   for metric_name, df in data_history.items():
      validate(df, ...) 
   Стало:
   for metric_name, df in data_history.items():
     if DataframeValidator.is_empty(df):
       ...
     if DataframeValidator.is_allowed_nulls_share(df):
       ...
// преобразовал глобальную переменную в несколько методов, возвращающих булевы значения

2. Было:
   df_processed = drop_outliers(df_raw, ...)
   ...
   df_processed = filter_by_tariffs(df_processed, ...)
   Стало:
   preprocessor = ClientsPreprocessor(df_raw)
   preprocessor.drop_outliers(df_raw, ...)
   preprocessor.filter_by_tariffs(df_raw, ...)
   >>> preprocessor.df_processed
// переменную, которая изменяется после каждого этапа обработки данных, вынес как переменную класса

3. Было:
   def check_outliers(thr: float):
      global df_objects_tree
      ...

   Стало:
   def check_outliers(df:pd.DataFrame, thr: float):
      ...
// перенёс переменную из глобального пространства имён в локальное

4. Было:
   LOGIN = ...
   PASSWORD = ...
   HOST = ...
   PORT = ...
   Стало:
   DB_CONFIGS = {
      "login": ...,
      "password": ...,
      "host": ...,
      "port": ...
   }
// сгруппировал переменные, отвечающие за единую логику в одну переменную

5. Было:
   def update_report_meta(report, params):
     report.name = params['name']
     report.source = params['source']
     report.email = params['email']
   Стало:
   class CampaingsReport:
       def update_meta(self, params):
         self.name = params.get('name', self.name)
         self.source = params.get('source', self.source)
         self.email = params.get('email', self.email)
// перенос логики из различных элементов через инкапсуляцию класса

6. Было:
   def preprocess_links(df: pd.DataFrame, min_dataset_size: int):
      if len(df) < min_dataset_size:
         ...
      ...
   Стало:
   def preprocess_links(df: pd.DataFrame, min_dataset_size: int):
      if len(df) < min_dataset_size:
         handle_low_size_dataset(df)
      ...

   def handle_low_size_dataset(df):
      ...
// разбиение одного большого метода на несколько маленьких
         
7. Было:
   df_processed = df.with_columns(
      pl.lit(data_cleaned).alias("DATA")
   )
   Стало:
   TS_STAT_COLUMN_NAME = "DATA"
   preprocessor = DataframePreprocessor(df)
   preprocessor.add_column(data_cleaned, TS_STAT_COLUMN_NAME)
// глобальную переменную перенёс в локальное пространство имён

8. Было:
   test_size = (FORECAST_STEPS / df.shape[0])
   Стало:
   def get_test_size(data_size, forecast_steps):
      return forecast_steps/data_size
// глобальную переменную перенёс в локальное пространство имён. 
// т.к. эта переменная используется один раз в коде, то можно получать к ней доступ через функцию 

9. Было:
   if response.status_code != 200:
      ...
   Стало:
   def is_success_response(response):
      return response.status_code == 200
// избавился от магической константы и перенёс потенциальную переменную в логику метода

10. 
      
      
   


      




