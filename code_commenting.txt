3.1. Прокомментируйте 7 мест в своём коде там, где это явно уместно.

1. # get incidents order
   incidents_dates = dict(sorted(incidents_dates.items(), key=lambda x: x[1]))
// здесь комментарий уместен, т.к. 

2. # metric and metric weight dot product 
   total_value = sum([weights[k] * metrics[k] for k in metrics.keys()])

3.  # keep only fresh incidents
    min_incident_date = base_date - relativedelta(minutes=max_incident_duration_minutes)
    df = df[df["timestamp"] >= min_incident_date]
    df.index = range(len(df))
// добавил комментарий, объясняющий бизнес-логику обработки данных 

4. # clients share removed after preprocessing
   not_found_share = (initial_size - df_recommendations.shape[0]) / initial_size
//

5. # replace zero divided inf to zero
   df = df.with_columns(
      pl.when(pl.col("...").is_in([np.inf, -np.inf])).then(pl.lit(0)).otherwise(pl.col("...").alias("..."))
   )



3.2. Если вы раньше делали комментарии к коду, найдите 5 мест, где эти комментарии были излишни, удалите их и сделайте сам код более наглядным. 

1.  Было:
    # Keep only key fields
    links_fields = ["id", "entityId", "entityType", "state", "timestamp"]
    try:
        df = df[links_fields]
    except KeyError:
        raise KeyError("Not found key fields in incidents data")
    Стало:
    def filter_by_key_fields(df: pd.DataFrame, columns: list):
       try:
          df_filtered = df[columns]
       except KeyError:
          raise KeyError("Not found key fields in incidents data")
       return df_filtered
    links_fields = ["id", "entityId", "entityType", "state", "timestamp"]
    df_key_fields = filter_by_key_fields(df, links_fields)
// блок кода, описанный комментарием вынес в отдельную функцию, что упростило его чтение и поддержку

2. Было:
   # tariffs which can be offer to clients
   df_offerable = df.filter(
      pl.col("TARIFF_ID").is_in(offerable_tariffs)
   )
   Стало:
   df_offerable_tariffs = df.filter(
      pl.col("TARIFF_ID").is_in(offerable_tariffs)
   )
// здесь оказалось достаточно дать более понятное имя результирующей переменной, чтоб отказаться от комментария

3. Было:
   # calculate business metrics
   df = df.with_columns(
      (pl.col("...") - pl.col("...")).alias("..."),
      (pl.col("...") * pl.col("...")).alias("...")
   )
   Стало:
   def calculate_business_metrics(df: pl.DataFrame, ):
      df_metrics = df.with_columns(
         (pl.col("...") - pl.col("...")).alias("..."),
         (pl.col("...") * pl.col("...")).alias("...")
      )
      return df_metrics
   df_metrics = calculate_business_metrics(df)
// блок кода, описанный комментарием вынес в отдельную функцию, что упростило его чтение и поддержку

4. Было:
   # Types preprocessing
   df = df.with_columns(
      pl.col("...").cast(pl.Int64),
      pl.col("...").cast(pl.Utf8),
      ...
   )
   Стало:
   def convert_fresh_clients_data_types(df: pl.DataFrame):
      df_converted = df.with_columns(
         pl.col("...").cast(pl.Int64),
         pl.col("...").cast(pl.Utf8),
         ...
      )
      return df_converted
// блок кода, описанный комментарием вынес в отдельную функцию, что упростило его чтение и поддержку
   
5. Было:
   # Keep only necessary fields for modeling
   df_scoring_features = df_scoring_features.select(
      features_list + ["CLUSTERING"]
   )
   Стало:
   def get_scoring_features(df: pl.DataFrame, features: list):
      return df.select(features)
   df_features = get_scoring_features(df_scoring_features, features_list + ["CLUSTERING"])
// блок кода, описанный комментарием вынес в отдельную функцию, что упростило его чтение и поддержку
