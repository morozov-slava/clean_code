Сделайте 3 примера с разбором различного времени связывания в вашем коде и поясните, почему в каждом случае был сделан такой выбор.

1.  AUTH_TOKEN = ...
    PASSWORD = ...
    SaymonSession = sh.Session()
    SaymonSession.open_session(password=PASSWORD, auth_token=AUTH_TOKEN, ...)
// Объявляю константы, считывая их значения из переменной окружения.
// Выбрал такой вариант реализация, т.к. работаю с чувствительными данными
// (По правде говоря, это наиболее оптимальный вариант по работе с credentials, что я смог найти в Python)

2. BASE_DATE = dt.datetime.today()
   ...
   df_objects_history = pp.get_objects_history(BASE_DATE, ...)
// Объявляю константу как текущую дату. Конфиги храню в формате .yml, куда текущую дату таким образом вносить проблематично.
// (После данного занятия, подумал о том, что имеет смысл реализовать как функцию по типу: get_current_date и тогда будет:
   BASE_DATE = get_current_date()
// Как минимум, это сделает код более читаемым, и если нужно будет в качестве BASE_DATE сделать какую-то другую дату, то достаточно будет создать новый метод и его подменить

3. with open("configs/configs.yml", "r") as f:
      configs = yaml.safe_load(f) 
   MAX_CLUSTERS = configs["MODEL"]["max_clusters"]
   ... 
   optimal_clusters = find_optimal_k(MAX_CLUSTERS, ...)
// Объявляю константу, считывая её значение из конфиг-файла в формате .yml
// Т.к. значение этой переменной не меняется в процессе выполнения кода, но при настройке программы,
// может появиться потребность в изменении этого параметра, то вынес его в конфиги и связываю с переменной-константой


