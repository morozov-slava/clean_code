Внесите 12 правок в свой код с учётом рекомендаций из данного занятия, и напишите по каждой, как и что конкретно вы улучшили. 

1. Было:  
   df["revenue_per_client_control_group"] = df["camp_revenue"] / df["control_group_size"] 
   Стало: 
   df["revenue_per_clients"] = df["camp_revenue"].div(df["n_clients"]).replace(np.inf, 0)
// при делении двух массивов предусмотрел вариант деления на 0 с обработкой результата деления на 0

2. Было:  
   rf_model.fit(X, y, random_state=42)
   Стало:
   SEED = 42
   rf_model.fit(X, y, random_state=SEED)
// избавился от магических символов -> перенёс их в константу 

3. Было:
   if is_table_exist(tablename) and len(df_clients) >= MIN_CLIENTS_FOR_CAMP:
      run_campaign() 
   Стало:
   is_revenue_table_exist = is_table_exist(tablename_revenue)
   is_enough_clients_sample = len(df_clients) >= MIN_CLIENTS_FOR_CAMP
   if is_revenue_table_exist and is_enough_clients_sample:
      run_campaign()
// добавил логические переменные для лучшей читаемости кода

4. Было:
   LEARNING_RATE = 0.001
   Стало:
   from decimal import Decimal
   LEARNING_RATE = Decimal(0.001)
// изменил тип вещественной переменной на тип с большей точностью 

5. Было:
   def get_active_clients(df: pd.DataFrame):
      df_active_clients = df[df["is_active"] == 1]
      return df_active_clients
   df_active_clients = get_active_clients(df)
   Стало:
   def get_active_clients(df: pd.DataFrame, is_active_column: str, value: int):
      df_active_clients = df[df["is_active"] == 1]
      return df_active_clients
   IS_ACTIVE_COLUMN = "is_active"
   IS_ACTIVE_VALUE = 1
   df_active_clients = get_active_clients(df, IS_ACTIVE_COLUMN, IS_ACTIVE_VALUE)
// избавился от магических символов -> перенёс их в константы

6. Было:
   df["activation_date"] = pd.to_datetime(df["activation_date"], format="%Y-%m-%d")
   Стало:
   df["activation_date"] = pd.to_datetime(df["activation_date"], format="%Y-%m-%d", errors="coerce")
   if df["activation_date"].isna().any():
      raise ValueError("There are NaN value in dataframe")
// переработал преобразование типов на случай наличия невалидных значений

7. Было:
   BASETABLE = "..."
   CAMPAIGNS_REVENUE_TABLE = "..."
   Стало:
   from typing import NamedTuple
   class Table(NamedTuple):
       basetable: str
       campaigns_revenue: str
   Tables = Table(basetable="...", campaigns_revenue="...")
// Использование специализированных типов данных для более удобного и эффективного создания переменных

8. Было:
   def get_uplift_percent(offer_price: int, current_price: int):
      return (offer_price - current_price) / current_price * 100
   Стало:
   import numpy as np
   def get_uplift_percent(offer_price: int, current_price: int):
      return (np.float64(offer_price) - np.float64(current_price) / np.float64(current_price)) * 100
// Повысил точность для вещественных чисел, преобразовав в значения с более высокой точностью

9. Было:
   MAX_CLIENT_AGE_YEARS = 30.5
   Стало:
   MAX_CLIENT_AGE_DAYS = int(30.5 * 365)
// Преобразование типа данных из float в int с минимальной потерей полезных данных

10. Было:
    if not new_client.status == 0 and current_date >= plan_report_date:
       insert_to_database(DB_CONFIGS, new_client.client_id)
    Стало:
    is_test_client = new_client.status == 0
    is_report_period = current_date >= plan_report_date
    if not is_test_client and is_report_period:
       insert_to_database(DB_CONFIGS, new_client.client_id)
// избавился от магических символов -> перенёс их в константы

11. Было:
    TEST_SIZE_CLASSIFIER = 0.225
    Стало:
    from decimal import Decimal
    TEST_SIZE_CLASSIFIER = Decimal(0.225)
// изменил тип вещественной переменной на тип с большей точностью 

12. Было:
    loading_objs_fields = ["id", "name", "state_id", "last_state_update", "entityType"]
   

    Стало:
    loading_objs_fields = ["id", "name", "state_id", "last_state_update", "entityType"]
    ["id", "name", "state_id", "last_state_update", "entityType"]
