Внесите 15 правок в свой код с учётом рекомендаций из данного занятия, и напишите по каждой, как и что конкретно вы улучшили. 

1. Было:
   n_tries = 3 
   Стало:
   MAX_ATTEMPTS = 3
// сменил имя переменной на более понятное + преобразовал в константу, т.к. переменная используется как хранилище значения

2. if any(prices_array < 0):
     raise ValueError("price value must be positive number")
// добавил проверку, чтоб в массиве цен не было отрицательных значений

3. Было:
   for df in objects_dfs:
     ...
   df = pd.concat([dt_objects, df_links])
   Стало:
   for df in objects_dfs:
     ...
   df_all_objects = pd.concat([dt_objects, df_links])
// изменил имя переменной, чтоб оно отличалось от переменной цикла во избежания рисков ошибок

4. Было:
   model = joblib.load("...")
   ...
   model = RandomForestClassifier()
   Стало:
   ts_forecast_model = joblib.load("...")
   ...
   classifier_model = RandomForestClassifier()
// изменил имена переменных, т.к. ранее одна и та же переменная приобретала разные значения моделей в течение исполнения кода

5. tariffs_to_offer = get_actual_tariffs(CAMPAIGN_TYPE)
   for camp_date in all_camp_dates:
      df_one_camp_date = df_clients[df_clients["CAMP_DATE"] == camp_date]
      df_offerable_clients = df_one_camp_date[df_one_camp_date["TARIFF"].isin(tariffs_to_offer)]
// переместил переменную tariffs_to_offer ближе к началу цикла, где она используется 

6. def encode_categorical_feature(df, col_name):
      if col_name not in df.columns:
         raise KeyError(f"Not found column '{col_name}'")
      ...
// добавил проверку на наличие столбца в некотором датафрейме

7. def preprocess_feature(df, col_name):
      if df[col_name].isna().sum() > 0:
         raise ValueError(f"There are NA values in column: {col_name}")
      ...
// добавил проверку на наличие пропусков в данных в некотором столбце датафрейма

8. Было:
   core_fields = ["client_id", "phone_number"]
   Стало:
   BUSINESS_FIELDS = ["client_id", "phone_number"]
// сменил имя переменной на более понятное + преобразовал в константу, т.к. переменная используется как хранилище значения

9. Было:
   df_processed = process_features(df, features_list)
   df_processed = df_processed[df_processed["TARIFF"].isin(actual_tariffs)]
   Стало:
   df_processed = process_features(df, features_list)
   df_with_actual_tariffs = df_processed[df_processed["TARIFF"].isin(actual_tariffs)]
// сменил имя переменной после второго преобразования, чтоб не использовать одну и ту же переменную несколько раз

10. assert len(X_train) + len(X_test) == len(df_features)
// добавил проверку, чтоб при разбиении датасета на тренирочный и тестовый, совокупный размер датасета остался прежний

11. Было:
    learning_rate = 0.02
    Стало:
    LEARNING_RATE = 0.02
// преобразовал переменную в константу, т.к. переменная используется как хранилище значения

12. Было:
    log_filepath = "..."
    ...
    Logger = create_logger(log_filepath)
    Стало:
    LOG_FILEPATH = "..."
    Logger = create_logger(LOG_FILEPATH)
// преобразовал переменную в константу + сместил объявление переменной ближе к функции, использующей её

13. def make_feature_engineering(df):
       if len(df) == 0:
          raise ValueError("Dataframe is empty")
       ...
// добавил проверку на пустой входной датафрейм

14. Было:
    n_trials = 30
    ...
    study.optimize(n_trials)
    Стало:
    N_TRIALS = 30
    study.optimize(N_TRIALS)
// преобразовал переменную в константу, т.к. переменная используется как хранилище значения

15. Было:
    df_processed = filter_by_actual_tariffs(df_raw, tariffs)
    df_processed = exclude_terminated_clients(df_processed, termination_id)
    Стало:
    df_processed = process_clients_data(df_raw, tariffs, termination_id)
// код предобработки данных вынес в отдельную функцию и исключил использование переменной дважды


